Aplicativos: TU, CU
se relaciona con Mensaje MQ
Archivo secuencial tiene campos (casa descripcion, direccion)
Programas: Estan por por aplicativo. prog suprogramas y mapas, Ver Arbol Algo
DDM: Data definition Model, son las vistas de tablas de Host

El programa llamador, me deja ir a ver loas vistas que usan.
ÑView-PROG-USA   (son los prog que usan la vista)
A-ViEW
y en el vec A-VIEW-Acciones esta lo que hace con la vista (Alta, modif, consult)


CUCTACTA-A


//Pending to be implemented
/*
Animals or Pets
Santa's Little Helper
Snowball 2
Canary M. Burns
Stampy
Stewart Duck 
Princess caballo de lisa
Moyo, mono

Relations: 
is child of
works in
live in
frecuenta 
Incripto en
es alumno de
es amigo de
*/


Queries:



CREATE (juan:Person {name: 'Juan'}),
       (maria:Person {name: 'Maria'}),
       (pedro:Person {name: 'Pedro'}),
       (ana:Person {name: 'Ana'}),
       (carlos:Person {name: 'Carlos'}),
       (maria)-[:PARENT_OF]->(juan),
       (pedro)-[:PARENT_OF]->(juan),
       (ana)-[:PARENT_OF]->(maria),
       (carlos)-[:PARENT_OF]->(pedro);

//Lista a todos los personajes llamdos Bart
MATCH (p:Character {name: 'Bart'}) 
RETURN p

//Lista a todos la flia Simpson con sus relaciones
MATCH (p:Character {surname: 'Simpson'}) 
RETURN p

//Todos los ancestros de Bart
MATCH (p:Character {name: 'Bart'})-[:CHILD_OF*]->(ancestor)
RETURN ancestor

//Todos los ancestros de Bart, incluido Bart
MATCH (p:Character {name: 'Bart'})-[:CHILD_OF*]->(ancestor)
RETURN p, ancestor

//Antecestros hombres de Bart 
MATCH (p:Character {name: 'Bart'})-[:CHILD_OF*]->(ancestor)
Where ancestor.sex='Male'
RETURN ancestor, p

//relationships no se sabe que hace
MATCH (p:Character {name: 'Bart'})-[:CHILD_OF*]->(ancestor)
RETURN ancestor, relationships((ancestor)<-[:CHILD_OF*]-(p))

//Devolver solo 2 generaciones de ancestros de Bart
MATCH (p:Character {name: 'Bart'})-[:CHILD_OF*1..2]->(ancestor)
RETURN ancestor

//Otra manera de devolver solo 2 generaciones de ancestros.
MATCH (p:Character {name: 'Bart'})
	-[:CHILD_OF]->(parents)
	-[:CHILD_OF]->(grandpas)
RETURN parents, grandpas

//Ancestros de bart de generaciones mayores a 2
MATCH (p:Character {name: 'Bart'})-[:CHILD_OF*3..]->(ancestor)
RETURN ancestor


//Bart ancestors with his own generation number
MATCH path = (p:Character {name: 'Bart'})-[:CHILD_OF*1..3]->(ancestor)
WITH ancestor, length(path) AS generation
RETURN ancestor.name, ancestor.surname, ancestor.sex, ancestor.age, ancestor.maidenName, ancestor.alias, generation


//Characters with more than 3 friends
MATCH (p:Character)-[:FRIEND_OF]->(friend)
WITH p, count(friend) AS friendCount
WHERE friendCount > 2
RETURN p.name, friendCount

//Cantidades de amigos con dataset limitado y ordenado
MATCH (p:Character)-[:FRIEND_OF]->(friend)
WITH p, count(friend) AS friendCount
ORDER BY friendCount DESC
LIMIT 10
RETURN p, friendCount



//Algun antepasado de Bart fue aero mozo (air steward)?
MATCH (p:Character {name: 'Bart'})-[:CHILD_OF*]->(ancestor)
WHERE ancestor.job = 'air steward'
RETURN ancestor

//Parents married with someone
MATCH (parent:Character)<-[:CHILD_OF]-()
WHERE exists((parent)-[:MARRIED_WITH]-())
RETURN parent

-Brothers married to each other
MATCH (brother:Character)-[:CHILD_OF]->(parent),
      (sister:Character)-[:CHILD_OF]->(parent),
      (brother)-[:MARRIED_WITH]->(sister)
WHERE brother.sex = "Male" AND sister.sex = "Female"
RETURN brother, sister


-List all friends
Match (p)-[:FRIEND_OF]->(l:Character {name: 'lisa' surname: 'Simpson'}) 
Return p

-Is Lisa friend with any real Character?
MATCH (lisa:Character {name: "Lisa", surname: "Simpson"})<-[:FRIEND_OF]-(friend:RealCharacter)
RETURN friend


Those who live in the Simpson Residence.
MATCH (p:Character)-[:LIVES_IN]->(l:Location{name:'Simpsons residence'})
RETURN p


-Quien trabaja en la planta nuclear y vive en la calle Evergreen

-Quien Vive en la residencia Simpson y conoce a un Real Character


//Antepasados de Bart:
MATCH (p:Character {name: 'Bart'})-[:CHILD_OF*]->(ancestor)
RETURN ancestor, p

//Todos los nodos relacionados con Bart
MATCH (p:Character {name: 'Bart'})-[rel]-(relatedNode)
RETURN p, rel, relatedNode;



//Amigos de homero que son compañeros de trabajo
//Amigos de los hijos de homero

Familias mas importantes de Springfield

Quienes tienen casamientos arreglados (arrenged marriages)

Amistades no correspondidas

Antepasados DIRECTOS en comun entre 2 personas:
MATCH (a:Character {name: 'Bart'}), (b:Character {name: 'Lisa'}),
      p = (a)-[:CHILD_OF*]->(commonAncestor)<-[:CHILD_OF*]-(b)
RETURN commonAncestor

(Profundidad limitada entre 1 y 5)
MATCH (a:Character {name: 'Bart'}), (b:Character {name: 'Lisa'}),
      p = (a)-[:CHILD_OF*1..5]->(commonAncestor)<-[:CHILD_OF*1..5]-(b)
RETURN commonAncestor, a ,b


Antepasados DIRECTOS en comun entre 3 personas:
MATCH (a:Character {name: 'Bart'}), (b:Character {name: 'Lisa'}), (c:Character {name: 'Maggie'}),
      p = (a)-[:CHILD_OF*]->(commonAncestor)<-[:CHILD_OF*]-(b),
      q = (c)-[:CHILD_OF*]->(commonAncestor)
RETURN commonAncestor, a ,b, c

TODOS los Antepasados en comun entre 3 personas:
MATCH (a:Character {name: 'Bart'}), (b:Character {name: 'Lisa'}), (c:Character {name: 'Maggie'})
MATCH p = (a)-[:CHILD_OF*]->(ancestor)
MATCH q = (b)-[:CHILD_OF*]->(ancestor)
MATCH r = (c)-[:CHILD_OF*]->(ancestor)
RETURN DISTINCT ancestor

Personajes sin realcion alguna:
MATCH (n:Character)
WHERE NOT (n)--()
RETURN n


Borrado de 450 nodos sin relacion:
MATCH (n)
WHERE NOT (n)--()
WITH n LIMIT 450
DELETE n
RETURN count(n) as deletedNodes